void API_ENTRY(glActiveTexture)(GLenum texture) {
    CALL_GL_API_1(glActiveTexture, texture);
}
void API_ENTRY(glAttachShader)(GLuint program, GLuint shader) {
    CALL_GL_API_2(glAttachShader, program, shader);
}
void API_ENTRY(glBindAttribLocation)(GLuint program, GLuint index, const GLchar *name) {
    CALL_GL_API_3(glBindAttribLocation, program, index, name);
}
void API_ENTRY(glBindBuffer)(GLenum target, GLuint buffer) {
    CALL_GL_API_2(glBindBuffer, target, buffer);
}
void API_ENTRY(glBindFramebuffer)(GLenum target, GLuint framebuffer) {
    CALL_GL_API_2(glBindFramebuffer, target, framebuffer);
}
void API_ENTRY(glBindRenderbuffer)(GLenum target, GLuint renderbuffer) {
    CALL_GL_API_2(glBindRenderbuffer, target, renderbuffer);
}
void API_ENTRY(glBindTexture)(GLenum target, GLuint texture) {
    CALL_GL_API_2(glBindTexture, target, texture);
}
void API_ENTRY(glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    CALL_GL_API_4(glBlendColor, red, green, blue, alpha);
}
void API_ENTRY(glBlendEquation)(GLenum mode) {
    CALL_GL_API_1(glBlendEquation, mode);
}
void API_ENTRY(glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha) {
    CALL_GL_API_2(glBlendEquationSeparate, modeRGB, modeAlpha);
}
void API_ENTRY(glBlendFunc)(GLenum sfactor, GLenum dfactor) {
    CALL_GL_API_2(glBlendFunc, sfactor, dfactor);
}
void API_ENTRY(glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    CALL_GL_API_4(glBlendFuncSeparate, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
void API_ENTRY(glBufferData)(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
    CALL_GL_API_4(glBufferData, target, size, data, usage);
}
void API_ENTRY(glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
    CALL_GL_API_4(glBufferSubData, target, offset, size, data);
}
GLenum API_ENTRY(glCheckFramebufferStatus)(GLenum target) {
    CALL_GL_API_RETURN_1(GLenum, glCheckFramebufferStatus, target);
}
void API_ENTRY(glClear)(GLbitfield mask) {
    CALL_GL_API_1(glClear, mask);
}
void API_ENTRY(glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    CALL_GL_API_4(glClearColor, red, green, blue, alpha);
}
void API_ENTRY(glClearDepthf)(GLfloat d) {
    CALL_GL_API_1(glClearDepthf, d);
}
void API_ENTRY(glClearStencil)(GLint s) {
    CALL_GL_API_1(glClearStencil, s);
}
void API_ENTRY(glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
    CALL_GL_API_4(glColorMask, red, green, blue, alpha);
}
void API_ENTRY(glCompileShader)(GLuint shader) {
    CALL_GL_API_1(glCompileShader, shader);
}
void API_ENTRY(glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
    CALL_GL_API_8(glCompressedTexImage2D, target, level, internalformat, width, height, border, imageSize, data);
}
void API_ENTRY(glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
    CALL_GL_API_9(glCompressedTexSubImage2D, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
void API_ENTRY(glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    CALL_GL_API_8(glCopyTexImage2D, target, level, internalformat, x, y, width, height, border);
}
void API_ENTRY(glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    CALL_GL_API_8(glCopyTexSubImage2D, target, level, xoffset, yoffset, x, y, width, height);
}
GLuint API_ENTRY(glCreateProgram)(void) {
    CALL_GL_API_RETURN_0(GLuint, glCreateProgram);
}
GLuint API_ENTRY(glCreateShader)(GLenum type) {
    CALL_GL_API_RETURN_1(GLuint, glCreateShader, type);
}
void API_ENTRY(glCullFace)(GLenum mode) {
    CALL_GL_API_1(glCullFace, mode);
}
void API_ENTRY(glDeleteBuffers)(GLsizei n, const GLuint *buffers) {
    CALL_GL_API_2(glDeleteBuffers, n, buffers);
}
void API_ENTRY(glDeleteFramebuffers)(GLsizei n, const GLuint *framebuffers) {
    CALL_GL_API_2(glDeleteFramebuffers, n, framebuffers);
}
void API_ENTRY(glDeleteProgram)(GLuint program) {
    CALL_GL_API_1(glDeleteProgram, program);
}
void API_ENTRY(glDeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers) {
    CALL_GL_API_2(glDeleteRenderbuffers, n, renderbuffers);
}
void API_ENTRY(glDeleteShader)(GLuint shader) {
    CALL_GL_API_1(glDeleteShader, shader);
}
void API_ENTRY(glDeleteTextures)(GLsizei n, const GLuint *textures) {
    CALL_GL_API_2(glDeleteTextures, n, textures);
}
void API_ENTRY(glDepthFunc)(GLenum func) {
    CALL_GL_API_1(glDepthFunc, func);
}
void API_ENTRY(glDepthMask)(GLboolean flag) {
    CALL_GL_API_1(glDepthMask, flag);
}
void API_ENTRY(glDepthRangef)(GLfloat n, GLfloat f) {
    CALL_GL_API_2(glDepthRangef, n, f);
}
void API_ENTRY(glDetachShader)(GLuint program, GLuint shader) {
    CALL_GL_API_2(glDetachShader, program, shader);
}
void API_ENTRY(glDisable)(GLenum cap) {
    CALL_GL_API_1(glDisable, cap);
}
void API_ENTRY(glDisableVertexAttribArray)(GLuint index) {
    CALL_GL_API_1(glDisableVertexAttribArray, index);
}
void API_ENTRY(glDrawArrays)(GLenum mode, GLint first, GLsizei count) {
    CALL_GL_API_3(glDrawArrays, mode, first, count);
}
void API_ENTRY(glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void *indices) {
    CALL_GL_API_4(glDrawElements, mode, count, type, indices);
}
void API_ENTRY(glEnable)(GLenum cap) {
    CALL_GL_API_1(glEnable, cap);
}
void API_ENTRY(glEnableVertexAttribArray)(GLuint index) {
    CALL_GL_API_1(glEnableVertexAttribArray, index);
}
void API_ENTRY(glFinish)(void) {
    CALL_GL_API_0(glFinish);
}
void API_ENTRY(glFlush)(void) {
    CALL_GL_API_0(glFlush);
}
void API_ENTRY(glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    CALL_GL_API_4(glFramebufferRenderbuffer, target, attachment, renderbuffertarget, renderbuffer);
}
void API_ENTRY(glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    CALL_GL_API_5(glFramebufferTexture2D, target, attachment, textarget, texture, level);
}
void API_ENTRY(glFrontFace)(GLenum mode) {
    CALL_GL_API_1(glFrontFace, mode);
}
void API_ENTRY(glGenBuffers)(GLsizei n, GLuint *buffers) {
    CALL_GL_API_2(glGenBuffers, n, buffers);
}
void API_ENTRY(glGenerateMipmap)(GLenum target) {
    CALL_GL_API_1(glGenerateMipmap, target);
}
void API_ENTRY(glGenFramebuffers)(GLsizei n, GLuint *framebuffers) {
    CALL_GL_API_2(glGenFramebuffers, n, framebuffers);
}
void API_ENTRY(glGenRenderbuffers)(GLsizei n, GLuint *renderbuffers) {
    CALL_GL_API_2(glGenRenderbuffers, n, renderbuffers);
}
void API_ENTRY(glGenTextures)(GLsizei n, GLuint *textures) {
    CALL_GL_API_2(glGenTextures, n, textures);
}
void API_ENTRY(glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
    CALL_GL_API_7(glGetActiveAttrib, program, index, bufSize, length, size, type, name);
}
void API_ENTRY(glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
    CALL_GL_API_7(glGetActiveUniform, program, index, bufSize, length, size, type, name);
}
void API_ENTRY(glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
    CALL_GL_API_4(glGetAttachedShaders, program, maxCount, count, shaders);
}
GLint API_ENTRY(glGetAttribLocation)(GLuint program, const GLchar *name) {
    CALL_GL_API_RETURN_2(GLint, glGetAttribLocation, program, name);
}
void API_ENTRY(glGetBooleanv)(GLenum pname, GLboolean *data) {
    CALL_GL_API_2(glGetBooleanv, pname, data);
}
void API_ENTRY(glGetBufferParameteriv)(GLenum target, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetBufferParameteriv, target, pname, params);
}
GLenum API_ENTRY(glGetError)(void) {
    CALL_GL_API_RETURN_0(GLenum, glGetError);
}
void API_ENTRY(glGetFloatv)(GLenum pname, GLfloat *data) {
    CALL_GL_API_2(glGetFloatv, pname, data);
}
void API_ENTRY(glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
    CALL_GL_API_4(glGetFramebufferAttachmentParameteriv, target, attachment, pname, params);
}
void API_ENTRY(glGetIntegerv)(GLenum pname, GLint *data) {
    CALL_GL_API_2(glGetIntegerv, pname, data);
}
void API_ENTRY(glGetProgramiv)(GLuint program, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetProgramiv, program, pname, params);
}
void API_ENTRY(glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    CALL_GL_API_4(glGetProgramInfoLog, program, bufSize, length, infoLog);
}
void API_ENTRY(glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetRenderbufferParameteriv, target, pname, params);
}
void API_ENTRY(glGetShaderiv)(GLuint shader, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetShaderiv, shader, pname, params);
}
void API_ENTRY(glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    CALL_GL_API_4(glGetShaderInfoLog, shader, bufSize, length, infoLog);
}
void API_ENTRY(glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
    CALL_GL_API_4(glGetShaderPrecisionFormat, shadertype, precisiontype, range, precision);
}
void API_ENTRY(glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
    CALL_GL_API_4(glGetShaderSource, shader, bufSize, length, source);
}
const GLubyte * API_ENTRY(glGetString)(GLenum name) {
    CALL_GL_API_RETURN_1(const GLubyte *, glGetString, name);
}
void API_ENTRY(glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params) {
    CALL_GL_API_3(glGetTexParameterfv, target, pname, params);
}
void API_ENTRY(glGetTexParameteriv)(GLenum target, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetTexParameteriv, target, pname, params);
}
void API_ENTRY(glGetUniformfv)(GLuint program, GLint location, GLfloat *params) {
    CALL_GL_API_3(glGetUniformfv, program, location, params);
}
void API_ENTRY(glGetUniformiv)(GLuint program, GLint location, GLint *params) {
    CALL_GL_API_3(glGetUniformiv, program, location, params);
}
GLint API_ENTRY(glGetUniformLocation)(GLuint program, const GLchar *name) {
    CALL_GL_API_RETURN_2(GLint, glGetUniformLocation, program, name);
}
void API_ENTRY(glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params) {
    CALL_GL_API_3(glGetVertexAttribfv, index, pname, params);
}
void API_ENTRY(glGetVertexAttribiv)(GLuint index, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetVertexAttribiv, index, pname, params);
}
void API_ENTRY(glGetVertexAttribPointerv)(GLuint index, GLenum pname, void **pointer) {
    CALL_GL_API_3(glGetVertexAttribPointerv, index, pname, pointer);
}
void API_ENTRY(glHint)(GLenum target, GLenum mode) {
    CALL_GL_API_2(glHint, target, mode);
}
GLboolean API_ENTRY(glIsBuffer)(GLuint buffer) {
    CALL_GL_API_RETURN_1(GLboolean, glIsBuffer, buffer);
}
GLboolean API_ENTRY(glIsEnabled)(GLenum cap) {
    CALL_GL_API_RETURN_1(GLboolean, glIsEnabled, cap);
}
GLboolean API_ENTRY(glIsFramebuffer)(GLuint framebuffer) {
    CALL_GL_API_RETURN_1(GLboolean, glIsFramebuffer, framebuffer);
}
GLboolean API_ENTRY(glIsProgram)(GLuint program) {
    CALL_GL_API_RETURN_1(GLboolean, glIsProgram, program);
}
GLboolean API_ENTRY(glIsRenderbuffer)(GLuint renderbuffer) {
    CALL_GL_API_RETURN_1(GLboolean, glIsRenderbuffer, renderbuffer);
}
GLboolean API_ENTRY(glIsShader)(GLuint shader) {
    CALL_GL_API_RETURN_1(GLboolean, glIsShader, shader);
}
GLboolean API_ENTRY(glIsTexture)(GLuint texture) {
    CALL_GL_API_RETURN_1(GLboolean, glIsTexture, texture);
}
void API_ENTRY(glLineWidth)(GLfloat width) {
    CALL_GL_API_1(glLineWidth, width);
}
void API_ENTRY(glLinkProgram)(GLuint program) {
    CALL_GL_API_1(glLinkProgram, program);
}
void API_ENTRY(glPixelStorei)(GLenum pname, GLint param) {
    CALL_GL_API_2(glPixelStorei, pname, param);
}
void API_ENTRY(glPolygonOffset)(GLfloat factor, GLfloat units) {
    CALL_GL_API_2(glPolygonOffset, factor, units);
}
void API_ENTRY(glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
    CALL_GL_API_7(glReadPixels, x, y, width, height, format, type, pixels);
}
void API_ENTRY(glReleaseShaderCompiler)(void) {
    CALL_GL_API_0(glReleaseShaderCompiler);
}
void API_ENTRY(glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
    CALL_GL_API_4(glRenderbufferStorage, target, internalformat, width, height);
}
void API_ENTRY(glSampleCoverage)(GLfloat value, GLboolean invert) {
    CALL_GL_API_2(glSampleCoverage, value, invert);
}
void API_ENTRY(glScissor)(GLint x, GLint y, GLsizei width, GLsizei height) {
    CALL_GL_API_4(glScissor, x, y, width, height);
}
void API_ENTRY(glShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {
    CALL_GL_API_5(glShaderBinary, count, shaders, binaryformat, binary, length);
}
void API_ENTRY(glShaderSource)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {
    CALL_GL_API_4(glShaderSource, shader, count, string, length);
}
void API_ENTRY(glStencilFunc)(GLenum func, GLint ref, GLuint mask) {
    CALL_GL_API_3(glStencilFunc, func, ref, mask);
}
void API_ENTRY(glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask) {
    CALL_GL_API_4(glStencilFuncSeparate, face, func, ref, mask);
}
void API_ENTRY(glStencilMask)(GLuint mask) {
    CALL_GL_API_1(glStencilMask, mask);
}
void API_ENTRY(glStencilMaskSeparate)(GLenum face, GLuint mask) {
    CALL_GL_API_2(glStencilMaskSeparate, face, mask);
}
void API_ENTRY(glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass) {
    CALL_GL_API_3(glStencilOp, fail, zfail, zpass);
}
void API_ENTRY(glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
    CALL_GL_API_4(glStencilOpSeparate, face, sfail, dpfail, dppass);
}
void API_ENTRY(glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
    CALL_GL_API_9(glTexImage2D, target, level, internalformat, width, height, border, format, type, pixels);
}
void API_ENTRY(glTexParameterf)(GLenum target, GLenum pname, GLfloat param) {
    CALL_GL_API_3(glTexParameterf, target, pname, param);
}
void API_ENTRY(glTexParameterfv)(GLenum target, GLenum pname, const GLfloat *params) {
    CALL_GL_API_3(glTexParameterfv, target, pname, params);
}
void API_ENTRY(glTexParameteri)(GLenum target, GLenum pname, GLint param) {
    CALL_GL_API_3(glTexParameteri, target, pname, param);
}
void API_ENTRY(glTexParameteriv)(GLenum target, GLenum pname, const GLint *params) {
    CALL_GL_API_3(glTexParameteriv, target, pname, params);
}
void API_ENTRY(glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
    CALL_GL_API_9(glTexSubImage2D, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
void API_ENTRY(glUniform1f)(GLint location, GLfloat v0) {
    CALL_GL_API_2(glUniform1f, location, v0);
}
void API_ENTRY(glUniform1fv)(GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_3(glUniform1fv, location, count, value);
}
void API_ENTRY(glUniform1i)(GLint location, GLint v0) {
    CALL_GL_API_2(glUniform1i, location, v0);
}
void API_ENTRY(glUniform1iv)(GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_3(glUniform1iv, location, count, value);
}
void API_ENTRY(glUniform2f)(GLint location, GLfloat v0, GLfloat v1) {
    CALL_GL_API_3(glUniform2f, location, v0, v1);
}
void API_ENTRY(glUniform2fv)(GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_3(glUniform2fv, location, count, value);
}
void API_ENTRY(glUniform2i)(GLint location, GLint v0, GLint v1) {
    CALL_GL_API_3(glUniform2i, location, v0, v1);
}
void API_ENTRY(glUniform2iv)(GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_3(glUniform2iv, location, count, value);
}
void API_ENTRY(glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    CALL_GL_API_4(glUniform3f, location, v0, v1, v2);
}
void API_ENTRY(glUniform3fv)(GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_3(glUniform3fv, location, count, value);
}
void API_ENTRY(glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2) {
    CALL_GL_API_4(glUniform3i, location, v0, v1, v2);
}
void API_ENTRY(glUniform3iv)(GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_3(glUniform3iv, location, count, value);
}
void API_ENTRY(glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    CALL_GL_API_5(glUniform4f, location, v0, v1, v2, v3);
}
void API_ENTRY(glUniform4fv)(GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_3(glUniform4fv, location, count, value);
}
void API_ENTRY(glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    CALL_GL_API_5(glUniform4i, location, v0, v1, v2, v3);
}
void API_ENTRY(glUniform4iv)(GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_3(glUniform4iv, location, count, value);
}
void API_ENTRY(glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix2fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix3fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix4fv, location, count, transpose, value);
}
void API_ENTRY(glUseProgram)(GLuint program) {
    CALL_GL_API_1(glUseProgram, program);
}
void API_ENTRY(glValidateProgram)(GLuint program) {
    CALL_GL_API_1(glValidateProgram, program);
}
void API_ENTRY(glVertexAttrib1f)(GLuint index, GLfloat x) {
    CALL_GL_API_2(glVertexAttrib1f, index, x);
}
void API_ENTRY(glVertexAttrib1fv)(GLuint index, const GLfloat *v) {
    CALL_GL_API_2(glVertexAttrib1fv, index, v);
}
void API_ENTRY(glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y) {
    CALL_GL_API_3(glVertexAttrib2f, index, x, y);
}
void API_ENTRY(glVertexAttrib2fv)(GLuint index, const GLfloat *v) {
    CALL_GL_API_2(glVertexAttrib2fv, index, v);
}
void API_ENTRY(glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    CALL_GL_API_4(glVertexAttrib3f, index, x, y, z);
}
void API_ENTRY(glVertexAttrib3fv)(GLuint index, const GLfloat *v) {
    CALL_GL_API_2(glVertexAttrib3fv, index, v);
}
void API_ENTRY(glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    CALL_GL_API_5(glVertexAttrib4f, index, x, y, z, w);
}
void API_ENTRY(glVertexAttrib4fv)(GLuint index, const GLfloat *v) {
    CALL_GL_API_2(glVertexAttrib4fv, index, v);
}
void API_ENTRY(glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
    CALL_GL_API_6(glVertexAttribPointer, index, size, type, normalized, stride, pointer);
}
void API_ENTRY(glViewport)(GLint x, GLint y, GLsizei width, GLsizei height) {
    CALL_GL_API_4(glViewport, x, y, width, height);
}
void API_ENTRY(glReadBuffer)(GLenum src) {
    CALL_GL_API_1(glReadBuffer, src);
}
void API_ENTRY(glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
    CALL_GL_API_6(glDrawRangeElements, mode, start, end, count, type, indices);
}
void API_ENTRY(glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
    CALL_GL_API_10(glTexImage3D, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void API_ENTRY(glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
    CALL_GL_API_11(glTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void API_ENTRY(glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    CALL_GL_API_9(glCopyTexSubImage3D, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void API_ENTRY(glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
    CALL_GL_API_9(glCompressedTexImage3D, target, level, internalformat, width, height, depth, border, imageSize, data);
}
void API_ENTRY(glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
    CALL_GL_API_11(glCompressedTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void API_ENTRY(glGenQueries)(GLsizei n, GLuint *ids) {
    CALL_GL_API_2(glGenQueries, n, ids);
}
void API_ENTRY(glDeleteQueries)(GLsizei n, const GLuint *ids) {
    CALL_GL_API_2(glDeleteQueries, n, ids);
}
GLboolean API_ENTRY(glIsQuery)(GLuint id) {
    CALL_GL_API_RETURN_1(GLboolean, glIsQuery, id);
}
void API_ENTRY(glBeginQuery)(GLenum target, GLuint id) {
    CALL_GL_API_2(glBeginQuery, target, id);
}
void API_ENTRY(glEndQuery)(GLenum target) {
    CALL_GL_API_1(glEndQuery, target);
}
void API_ENTRY(glGetQueryiv)(GLenum target, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetQueryiv, target, pname, params);
}
void API_ENTRY(glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params) {
    CALL_GL_API_3(glGetQueryObjectuiv, id, pname, params);
}
GLboolean API_ENTRY(glUnmapBuffer)(GLenum target) {
    CALL_GL_API_RETURN_1(GLboolean, glUnmapBuffer, target);
}
void API_ENTRY(glGetBufferPointerv)(GLenum target, GLenum pname, void **params) {
    CALL_GL_API_3(glGetBufferPointerv, target, pname, params);
}
void API_ENTRY(glDrawBuffers)(GLsizei n, const GLenum *bufs) {
    CALL_GL_API_2(glDrawBuffers, n, bufs);
}
void API_ENTRY(glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix2x3fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix3x2fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix2x4fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix4x2fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix3x4fv, location, count, transpose, value);
}
void API_ENTRY(glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_4(glUniformMatrix4x3fv, location, count, transpose, value);
}
void API_ENTRY(glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    CALL_GL_API_10(glBlitFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void API_ENTRY(glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    CALL_GL_API_5(glRenderbufferStorageMultisample, target, samples, internalformat, width, height);
}
void API_ENTRY(glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    CALL_GL_API_5(glFramebufferTextureLayer, target, attachment, texture, level, layer);
}
void * API_ENTRY(glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    CALL_GL_API_RETURN_4(void *, glMapBufferRange, target, offset, length, access);
}
void API_ENTRY(glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length) {
    CALL_GL_API_3(glFlushMappedBufferRange, target, offset, length);
}
void API_ENTRY(glBindVertexArray)(GLuint array) {
    CALL_GL_API_1(glBindVertexArray, array);
}
void API_ENTRY(glDeleteVertexArrays)(GLsizei n, const GLuint *arrays) {
    CALL_GL_API_2(glDeleteVertexArrays, n, arrays);
}
void API_ENTRY(glGenVertexArrays)(GLsizei n, GLuint *arrays) {
    CALL_GL_API_2(glGenVertexArrays, n, arrays);
}
GLboolean API_ENTRY(glIsVertexArray)(GLuint array) {
    CALL_GL_API_RETURN_1(GLboolean, glIsVertexArray, array);
}
void API_ENTRY(glGetIntegeri_v)(GLenum target, GLuint index, GLint *data) {
    CALL_GL_API_3(glGetIntegeri_v, target, index, data);
}
void API_ENTRY(glBeginTransformFeedback)(GLenum primitiveMode) {
    CALL_GL_API_1(glBeginTransformFeedback, primitiveMode);
}
void API_ENTRY(glEndTransformFeedback)(void) {
    CALL_GL_API_0(glEndTransformFeedback);
}
void API_ENTRY(glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    CALL_GL_API_5(glBindBufferRange, target, index, buffer, offset, size);
}
void API_ENTRY(glBindBufferBase)(GLenum target, GLuint index, GLuint buffer) {
    CALL_GL_API_3(glBindBufferBase, target, index, buffer);
}
void API_ENTRY(glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
    CALL_GL_API_4(glTransformFeedbackVaryings, program, count, varyings, bufferMode);
}
void API_ENTRY(glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
    CALL_GL_API_7(glGetTransformFeedbackVarying, program, index, bufSize, length, size, type, name);
}
void API_ENTRY(glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
    CALL_GL_API_5(glVertexAttribIPointer, index, size, type, stride, pointer);
}
void API_ENTRY(glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetVertexAttribIiv, index, pname, params);
}
void API_ENTRY(glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params) {
    CALL_GL_API_3(glGetVertexAttribIuiv, index, pname, params);
}
void API_ENTRY(glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w) {
    CALL_GL_API_5(glVertexAttribI4i, index, x, y, z, w);
}
void API_ENTRY(glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    CALL_GL_API_5(glVertexAttribI4ui, index, x, y, z, w);
}
void API_ENTRY(glVertexAttribI4iv)(GLuint index, const GLint *v) {
    CALL_GL_API_2(glVertexAttribI4iv, index, v);
}
void API_ENTRY(glVertexAttribI4uiv)(GLuint index, const GLuint *v) {
    CALL_GL_API_2(glVertexAttribI4uiv, index, v);
}
void API_ENTRY(glGetUniformuiv)(GLuint program, GLint location, GLuint *params) {
    CALL_GL_API_3(glGetUniformuiv, program, location, params);
}
GLint API_ENTRY(glGetFragDataLocation)(GLuint program, const GLchar *name) {
    CALL_GL_API_RETURN_2(GLint, glGetFragDataLocation, program, name);
}
void API_ENTRY(glUniform1ui)(GLint location, GLuint v0) {
    CALL_GL_API_2(glUniform1ui, location, v0);
}
void API_ENTRY(glUniform2ui)(GLint location, GLuint v0, GLuint v1) {
    CALL_GL_API_3(glUniform2ui, location, v0, v1);
}
void API_ENTRY(glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2) {
    CALL_GL_API_4(glUniform3ui, location, v0, v1, v2);
}
void API_ENTRY(glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    CALL_GL_API_5(glUniform4ui, location, v0, v1, v2, v3);
}
void API_ENTRY(glUniform1uiv)(GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_3(glUniform1uiv, location, count, value);
}
void API_ENTRY(glUniform2uiv)(GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_3(glUniform2uiv, location, count, value);
}
void API_ENTRY(glUniform3uiv)(GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_3(glUniform3uiv, location, count, value);
}
void API_ENTRY(glUniform4uiv)(GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_3(glUniform4uiv, location, count, value);
}
void API_ENTRY(glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value) {
    CALL_GL_API_3(glClearBufferiv, buffer, drawbuffer, value);
}
void API_ENTRY(glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value) {
    CALL_GL_API_3(glClearBufferuiv, buffer, drawbuffer, value);
}
void API_ENTRY(glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
    CALL_GL_API_3(glClearBufferfv, buffer, drawbuffer, value);
}
void API_ENTRY(glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
    CALL_GL_API_4(glClearBufferfi, buffer, drawbuffer, depth, stencil);
}
const GLubyte * API_ENTRY(glGetStringi)(GLenum name, GLuint index) {
    CALL_GL_API_RETURN_2(const GLubyte *, glGetStringi, name, index);
}
void API_ENTRY(glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    CALL_GL_API_5(glCopyBufferSubData, readTarget, writeTarget, readOffset, writeOffset, size);
}
void API_ENTRY(glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {
    CALL_GL_API_4(glGetUniformIndices, program, uniformCount, uniformNames, uniformIndices);
}
void API_ENTRY(glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
    CALL_GL_API_5(glGetActiveUniformsiv, program, uniformCount, uniformIndices, pname, params);
}
GLuint API_ENTRY(glGetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName) {
    CALL_GL_API_RETURN_2(GLuint, glGetUniformBlockIndex, program, uniformBlockName);
}
void API_ENTRY(glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
    CALL_GL_API_4(glGetActiveUniformBlockiv, program, uniformBlockIndex, pname, params);
}
void API_ENTRY(glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
    CALL_GL_API_5(glGetActiveUniformBlockName, program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
void API_ENTRY(glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
    CALL_GL_API_3(glUniformBlockBinding, program, uniformBlockIndex, uniformBlockBinding);
}
void API_ENTRY(glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
    CALL_GL_API_4(glDrawArraysInstanced, mode, first, count, instancecount);
}
void API_ENTRY(glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {
    CALL_GL_API_5(glDrawElementsInstanced, mode, count, type, indices, instancecount);
}
GLsync API_ENTRY(glFenceSync)(GLenum condition, GLbitfield flags) {
    CALL_GL_API_RETURN_2(GLsync, glFenceSync, condition, flags);
}
GLboolean API_ENTRY(glIsSync)(GLsync sync) {
    CALL_GL_API_RETURN_1(GLboolean, glIsSync, sync);
}
void API_ENTRY(glDeleteSync)(GLsync sync) {
    CALL_GL_API_1(glDeleteSync, sync);
}
GLenum API_ENTRY(glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) {
    CALL_GL_API_RETURN_3(GLenum, glClientWaitSync, sync, flags, timeout);
}
void API_ENTRY(glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) {
    CALL_GL_API_3(glWaitSync, sync, flags, timeout);
}
void API_ENTRY(glGetInteger64v)(GLenum pname, GLint64 *data) {
    CALL_GL_API_2(glGetInteger64v, pname, data);
}
void API_ENTRY(glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
    CALL_GL_API_5(glGetSynciv, sync, pname, bufSize, length, values);
}
void API_ENTRY(glGetInteger64i_v)(GLenum target, GLuint index, GLint64 *data) {
    CALL_GL_API_3(glGetInteger64i_v, target, index, data);
}
void API_ENTRY(glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params) {
    CALL_GL_API_3(glGetBufferParameteri64v, target, pname, params);
}
void API_ENTRY(glGenSamplers)(GLsizei count, GLuint *samplers) {
    CALL_GL_API_2(glGenSamplers, count, samplers);
}
void API_ENTRY(glDeleteSamplers)(GLsizei count, const GLuint *samplers) {
    CALL_GL_API_2(glDeleteSamplers, count, samplers);
}
GLboolean API_ENTRY(glIsSampler)(GLuint sampler) {
    CALL_GL_API_RETURN_1(GLboolean, glIsSampler, sampler);
}
void API_ENTRY(glBindSampler)(GLuint unit, GLuint sampler) {
    CALL_GL_API_2(glBindSampler, unit, sampler);
}
void API_ENTRY(glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param) {
    CALL_GL_API_3(glSamplerParameteri, sampler, pname, param);
}
void API_ENTRY(glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param) {
    CALL_GL_API_3(glSamplerParameteriv, sampler, pname, param);
}
void API_ENTRY(glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param) {
    CALL_GL_API_3(glSamplerParameterf, sampler, pname, param);
}
void API_ENTRY(glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param) {
    CALL_GL_API_3(glSamplerParameterfv, sampler, pname, param);
}
void API_ENTRY(glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetSamplerParameteriv, sampler, pname, params);
}
void API_ENTRY(glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params) {
    CALL_GL_API_3(glGetSamplerParameterfv, sampler, pname, params);
}
void API_ENTRY(glVertexAttribDivisor)(GLuint index, GLuint divisor) {
    CALL_GL_API_2(glVertexAttribDivisor, index, divisor);
}
void API_ENTRY(glBindTransformFeedback)(GLenum target, GLuint id) {
    CALL_GL_API_2(glBindTransformFeedback, target, id);
}
void API_ENTRY(glDeleteTransformFeedbacks)(GLsizei n, const GLuint *ids) {
    CALL_GL_API_2(glDeleteTransformFeedbacks, n, ids);
}
void API_ENTRY(glGenTransformFeedbacks)(GLsizei n, GLuint *ids) {
    CALL_GL_API_2(glGenTransformFeedbacks, n, ids);
}
GLboolean API_ENTRY(glIsTransformFeedback)(GLuint id) {
    CALL_GL_API_RETURN_1(GLboolean, glIsTransformFeedback, id);
}
void API_ENTRY(glPauseTransformFeedback)(void) {
    CALL_GL_API_0(glPauseTransformFeedback);
}
void API_ENTRY(glResumeTransformFeedback)(void) {
    CALL_GL_API_0(glResumeTransformFeedback);
}
void API_ENTRY(glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
    CALL_GL_API_5(glGetProgramBinary, program, bufSize, length, binaryFormat, binary);
}
void API_ENTRY(glProgramBinary)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {
    CALL_GL_API_4(glProgramBinary, program, binaryFormat, binary, length);
}
void API_ENTRY(glProgramParameteri)(GLuint program, GLenum pname, GLint value) {
    CALL_GL_API_3(glProgramParameteri, program, pname, value);
}
void API_ENTRY(glInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
    CALL_GL_API_3(glInvalidateFramebuffer, target, numAttachments, attachments);
}
void API_ENTRY(glInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
    CALL_GL_API_7(glInvalidateSubFramebuffer, target, numAttachments, attachments, x, y, width, height);
}
void API_ENTRY(glTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    CALL_GL_API_5(glTexStorage2D, target, levels, internalformat, width, height);
}
void API_ENTRY(glTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    CALL_GL_API_6(glTexStorage3D, target, levels, internalformat, width, height, depth);
}
void API_ENTRY(glGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {
    CALL_GL_API_5(glGetInternalformativ, target, internalformat, pname, bufSize, params);
}
void API_ENTRY(glDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
    CALL_GL_API_3(glDispatchCompute, num_groups_x, num_groups_y, num_groups_z);
}
void API_ENTRY(glDispatchComputeIndirect)(GLintptr indirect) {
    CALL_GL_API_1(glDispatchComputeIndirect, indirect);
}
void API_ENTRY(glDrawArraysIndirect)(GLenum mode, const void *indirect) {
    CALL_GL_API_2(glDrawArraysIndirect, mode, indirect);
}
void API_ENTRY(glDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect) {
    CALL_GL_API_3(glDrawElementsIndirect, mode, type, indirect);
}
void API_ENTRY(glFramebufferParameteri)(GLenum target, GLenum pname, GLint param) {
    CALL_GL_API_3(glFramebufferParameteri, target, pname, param);
}
void API_ENTRY(glGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetFramebufferParameteriv, target, pname, params);
}
void API_ENTRY(glGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
    CALL_GL_API_4(glGetProgramInterfaceiv, program, programInterface, pname, params);
}
GLuint API_ENTRY(glGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name) {
    CALL_GL_API_RETURN_3(GLuint, glGetProgramResourceIndex, program, programInterface, name);
}
void API_ENTRY(glGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
    CALL_GL_API_6(glGetProgramResourceName, program, programInterface, index, bufSize, length, name);
}
void API_ENTRY(glGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {
    CALL_GL_API_8(glGetProgramResourceiv, program, programInterface, index, propCount, props, bufSize, length, params);
}
GLint API_ENTRY(glGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name) {
    CALL_GL_API_RETURN_3(GLint, glGetProgramResourceLocation, program, programInterface, name);
}
void API_ENTRY(glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program) {
    CALL_GL_API_3(glUseProgramStages, pipeline, stages, program);
}
void API_ENTRY(glActiveShaderProgram)(GLuint pipeline, GLuint program) {
    CALL_GL_API_2(glActiveShaderProgram, pipeline, program);
}
GLuint API_ENTRY(glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const*strings) {
    CALL_GL_API_RETURN_3(GLuint, glCreateShaderProgramv, type, count, strings);
}
void API_ENTRY(glBindProgramPipeline)(GLuint pipeline) {
    CALL_GL_API_1(glBindProgramPipeline, pipeline);
}
void API_ENTRY(glDeleteProgramPipelines)(GLsizei n, const GLuint *pipelines) {
    CALL_GL_API_2(glDeleteProgramPipelines, n, pipelines);
}
void API_ENTRY(glGenProgramPipelines)(GLsizei n, GLuint *pipelines) {
    CALL_GL_API_2(glGenProgramPipelines, n, pipelines);
}
GLboolean API_ENTRY(glIsProgramPipeline)(GLuint pipeline) {
    CALL_GL_API_RETURN_1(GLboolean, glIsProgramPipeline, pipeline);
}
void API_ENTRY(glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetProgramPipelineiv, pipeline, pname, params);
}
void API_ENTRY(glProgramUniform1i)(GLuint program, GLint location, GLint v0) {
    CALL_GL_API_3(glProgramUniform1i, program, location, v0);
}
void API_ENTRY(glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1) {
    CALL_GL_API_4(glProgramUniform2i, program, location, v0, v1);
}
void API_ENTRY(glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
    CALL_GL_API_5(glProgramUniform3i, program, location, v0, v1, v2);
}
void API_ENTRY(glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    CALL_GL_API_6(glProgramUniform4i, program, location, v0, v1, v2, v3);
}
void API_ENTRY(glProgramUniform1ui)(GLuint program, GLint location, GLuint v0) {
    CALL_GL_API_3(glProgramUniform1ui, program, location, v0);
}
void API_ENTRY(glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1) {
    CALL_GL_API_4(glProgramUniform2ui, program, location, v0, v1);
}
void API_ENTRY(glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
    CALL_GL_API_5(glProgramUniform3ui, program, location, v0, v1, v2);
}
void API_ENTRY(glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    CALL_GL_API_6(glProgramUniform4ui, program, location, v0, v1, v2, v3);
}
void API_ENTRY(glProgramUniform1f)(GLuint program, GLint location, GLfloat v0) {
    CALL_GL_API_3(glProgramUniform1f, program, location, v0);
}
void API_ENTRY(glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
    CALL_GL_API_4(glProgramUniform2f, program, location, v0, v1);
}
void API_ENTRY(glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    CALL_GL_API_5(glProgramUniform3f, program, location, v0, v1, v2);
}
void API_ENTRY(glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    CALL_GL_API_6(glProgramUniform4f, program, location, v0, v1, v2, v3);
}
void API_ENTRY(glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_4(glProgramUniform1iv, program, location, count, value);
}
void API_ENTRY(glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_4(glProgramUniform2iv, program, location, count, value);
}
void API_ENTRY(glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_4(glProgramUniform3iv, program, location, count, value);
}
void API_ENTRY(glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value) {
    CALL_GL_API_4(glProgramUniform4iv, program, location, count, value);
}
void API_ENTRY(glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_4(glProgramUniform1uiv, program, location, count, value);
}
void API_ENTRY(glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_4(glProgramUniform2uiv, program, location, count, value);
}
void API_ENTRY(glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_4(glProgramUniform3uiv, program, location, count, value);
}
void API_ENTRY(glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value) {
    CALL_GL_API_4(glProgramUniform4uiv, program, location, count, value);
}
void API_ENTRY(glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_4(glProgramUniform1fv, program, location, count, value);
}
void API_ENTRY(glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_4(glProgramUniform2fv, program, location, count, value);
}
void API_ENTRY(glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_4(glProgramUniform3fv, program, location, count, value);
}
void API_ENTRY(glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
    CALL_GL_API_4(glProgramUniform4fv, program, location, count, value);
}
void API_ENTRY(glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix2fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix3fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix4fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix2x3fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix3x2fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix2x4fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix4x2fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix3x4fv, program, location, count, transpose, value);
}
void API_ENTRY(glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    CALL_GL_API_5(glProgramUniformMatrix4x3fv, program, location, count, transpose, value);
}
void API_ENTRY(glValidateProgramPipeline)(GLuint pipeline) {
    CALL_GL_API_1(glValidateProgramPipeline, pipeline);
}
void API_ENTRY(glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    CALL_GL_API_4(glGetProgramPipelineInfoLog, pipeline, bufSize, length, infoLog);
}
void API_ENTRY(glBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
    CALL_GL_API_7(glBindImageTexture, unit, texture, level, layered, layer, access, format);
}
void API_ENTRY(glGetBooleani_v)(GLenum target, GLuint index, GLboolean *data) {
    CALL_GL_API_3(glGetBooleani_v, target, index, data);
}
void API_ENTRY(glMemoryBarrier)(GLbitfield barriers) {
    CALL_GL_API_1(glMemoryBarrier, barriers);
}
void API_ENTRY(glMemoryBarrierByRegion)(GLbitfield barriers) {
    CALL_GL_API_1(glMemoryBarrierByRegion, barriers);
}
void API_ENTRY(glTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    CALL_GL_API_6(glTexStorage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);
}
void API_ENTRY(glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val) {
    CALL_GL_API_3(glGetMultisamplefv, pname, index, val);
}
void API_ENTRY(glSampleMaski)(GLuint maskNumber, GLbitfield mask) {
    CALL_GL_API_2(glSampleMaski, maskNumber, mask);
}
void API_ENTRY(glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params) {
    CALL_GL_API_4(glGetTexLevelParameteriv, target, level, pname, params);
}
void API_ENTRY(glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params) {
    CALL_GL_API_4(glGetTexLevelParameterfv, target, level, pname, params);
}
void API_ENTRY(glBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    CALL_GL_API_4(glBindVertexBuffer, bindingindex, buffer, offset, stride);
}
void API_ENTRY(glVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    CALL_GL_API_5(glVertexAttribFormat, attribindex, size, type, normalized, relativeoffset);
}
void API_ENTRY(glVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    CALL_GL_API_4(glVertexAttribIFormat, attribindex, size, type, relativeoffset);
}
void API_ENTRY(glVertexAttribBinding)(GLuint attribindex, GLuint bindingindex) {
    CALL_GL_API_2(glVertexAttribBinding, attribindex, bindingindex);
}
void API_ENTRY(glVertexBindingDivisor)(GLuint bindingindex, GLuint divisor) {
    CALL_GL_API_2(glVertexBindingDivisor, bindingindex, divisor);
}
void API_ENTRY(glBlendBarrier)(void) {
    CALL_GL_API_0(glBlendBarrier);
}
void API_ENTRY(glCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
    CALL_GL_API_15(glCopyImageSubData, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
void API_ENTRY(glDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
    CALL_GL_API_6(glDebugMessageControl, source, type, severity, count, ids, enabled);
}
void API_ENTRY(glDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
    CALL_GL_API_6(glDebugMessageInsert, source, type, id, severity, length, buf);
}
void API_ENTRY(glDebugMessageCallback)(GLDEBUGPROC callback, const void *userParam) {
    CALL_GL_API_2(glDebugMessageCallback, callback, userParam);
}
GLuint API_ENTRY(glGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
    CALL_GL_API_RETURN_8(GLuint, glGetDebugMessageLog, count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
void API_ENTRY(glPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
    CALL_GL_API_4(glPushDebugGroup, source, id, length, message);
}
void API_ENTRY(glPopDebugGroup)(void) {
    CALL_GL_API_0(glPopDebugGroup);
}
void API_ENTRY(glObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
    CALL_GL_API_4(glObjectLabel, identifier, name, length, label);
}
void API_ENTRY(glGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
    CALL_GL_API_5(glGetObjectLabel, identifier, name, bufSize, length, label);
}
void API_ENTRY(glObjectPtrLabel)(const void *ptr, GLsizei length, const GLchar *label) {
    CALL_GL_API_3(glObjectPtrLabel, ptr, length, label);
}
void API_ENTRY(glGetObjectPtrLabel)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
    CALL_GL_API_4(glGetObjectPtrLabel, ptr, bufSize, length, label);
}
void API_ENTRY(glGetPointerv)(GLenum pname, void **params) {
    CALL_GL_API_2(glGetPointerv, pname, params);
}
void API_ENTRY(glEnablei)(GLenum target, GLuint index) {
    CALL_GL_API_2(glEnablei, target, index);
}
void API_ENTRY(glDisablei)(GLenum target, GLuint index) {
    CALL_GL_API_2(glDisablei, target, index);
}
void API_ENTRY(glBlendEquationi)(GLuint buf, GLenum mode) {
    CALL_GL_API_2(glBlendEquationi, buf, mode);
}
void API_ENTRY(glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    CALL_GL_API_3(glBlendEquationSeparatei, buf, modeRGB, modeAlpha);
}
void API_ENTRY(glBlendFunci)(GLuint buf, GLenum src, GLenum dst) {
    CALL_GL_API_3(glBlendFunci, buf, src, dst);
}
void API_ENTRY(glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    CALL_GL_API_5(glBlendFuncSeparatei, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void API_ENTRY(glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
    CALL_GL_API_5(glColorMaski, index, r, g, b, a);
}
GLboolean API_ENTRY(glIsEnabledi)(GLenum target, GLuint index) {
    CALL_GL_API_RETURN_2(GLboolean, glIsEnabledi, target, index);
}
void API_ENTRY(glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
    CALL_GL_API_5(glDrawElementsBaseVertex, mode, count, type, indices, basevertex);
}
void API_ENTRY(glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
    CALL_GL_API_7(glDrawRangeElementsBaseVertex, mode, start, end, count, type, indices, basevertex);
}
void API_ENTRY(glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {
    CALL_GL_API_6(glDrawElementsInstancedBaseVertex, mode, count, type, indices, instancecount, basevertex);
}
void API_ENTRY(glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    CALL_GL_API_4(glFramebufferTexture, target, attachment, texture, level);
}
void API_ENTRY(glPrimitiveBoundingBox)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
    CALL_GL_API_8(glPrimitiveBoundingBox, minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}
GLenum API_ENTRY(glGetGraphicsResetStatus)(void) {
    CALL_GL_API_RETURN_0(GLenum, glGetGraphicsResetStatus);
}
void API_ENTRY(glReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
    CALL_GL_API_8(glReadnPixels, x, y, width, height, format, type, bufSize, data);
}
void API_ENTRY(glGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
    CALL_GL_API_4(glGetnUniformfv, program, location, bufSize, params);
}
void API_ENTRY(glGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
    CALL_GL_API_4(glGetnUniformiv, program, location, bufSize, params);
}
void API_ENTRY(glGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
    CALL_GL_API_4(glGetnUniformuiv, program, location, bufSize, params);
}
void API_ENTRY(glMinSampleShading)(GLfloat value) {
    CALL_GL_API_1(glMinSampleShading, value);
}
void API_ENTRY(glPatchParameteri)(GLenum pname, GLint value) {
    CALL_GL_API_2(glPatchParameteri, pname, value);
}
void API_ENTRY(glTexParameterIiv)(GLenum target, GLenum pname, const GLint *params) {
    CALL_GL_API_3(glTexParameterIiv, target, pname, params);
}
void API_ENTRY(glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params) {
    CALL_GL_API_3(glTexParameterIuiv, target, pname, params);
}
void API_ENTRY(glGetTexParameterIiv)(GLenum target, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetTexParameterIiv, target, pname, params);
}
void API_ENTRY(glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params) {
    CALL_GL_API_3(glGetTexParameterIuiv, target, pname, params);
}
void API_ENTRY(glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param) {
    CALL_GL_API_3(glSamplerParameterIiv, sampler, pname, param);
}
void API_ENTRY(glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param) {
    CALL_GL_API_3(glSamplerParameterIuiv, sampler, pname, param);
}
void API_ENTRY(glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params) {
    CALL_GL_API_3(glGetSamplerParameterIiv, sampler, pname, params);
}
void API_ENTRY(glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params) {
    CALL_GL_API_3(glGetSamplerParameterIuiv, sampler, pname, params);
}
void API_ENTRY(glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer) {
    CALL_GL_API_3(glTexBuffer, target, internalformat, buffer);
}
void API_ENTRY(glTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    CALL_GL_API_5(glTexBufferRange, target, internalformat, buffer, offset, size);
}
void API_ENTRY(glTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    CALL_GL_API_7(glTexStorage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

EGLDisplay API_ENTRY(eglGetDisplay)(NativeDisplayType arg1) {
    CALL_EGL_API_RETURN_1(EGLDisplay, eglGetDisplay, arg1);
}
EGLBoolean API_ENTRY(eglInitialize)(EGLDisplay arg1, EGLint* arg2, EGLint* arg3) {
    CALL_EGL_API_RETURN_3(EGLBoolean, eglInitialize, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglTerminate)(EGLDisplay arg1) {
    CALL_EGL_API_RETURN_1(EGLBoolean, eglTerminate, arg1);
}
EGLBoolean API_ENTRY(eglGetConfigs)(EGLDisplay arg1, EGLConfig* arg2, EGLint arg3, EGLint* arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglGetConfigs, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglChooseConfig)(EGLDisplay arg1, const EGLint * arg2, EGLConfig * arg3, EGLint arg4, EGLint * arg5) {
    CALL_EGL_API_RETURN_5(EGLBoolean, eglChooseConfig, arg1, arg2, arg3, arg4, arg5);
}
           
EGLBoolean API_ENTRY(eglGetConfigAttrib)(EGLDisplay arg1, EGLConfig arg2, EGLint arg3, EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglGetConfigAttrib, arg1, arg2, arg3, arg4);
}
EGLSurface API_ENTRY(eglCreateWindowSurface)(EGLDisplay arg1, EGLConfig arg2, NativeWindowType arg3, const EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLSurface, eglCreateWindowSurface, arg1, arg2, arg3, arg4);
}
EGLSurface API_ENTRY(eglCreatePixmapSurface)(EGLDisplay arg1, EGLConfig arg2, NativePixmapType arg3, const EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLSurface, eglCreatePixmapSurface, arg1, arg2, arg3, arg4);
}
EGLSurface API_ENTRY(eglCreatePbufferSurface)( EGLDisplay arg1, EGLConfig arg2, const EGLint * arg3) {
    CALL_EGL_API_RETURN_3(EGLSurface, eglCreatePbufferSurface, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglDestroySurface)(EGLDisplay arg1, EGLSurface arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglDestroySurface, arg1, arg2);
}
EGLBoolean API_ENTRY(eglQuerySurface)( EGLDisplay arg1, EGLSurface arg2, EGLint arg3, EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglQuerySurface, arg1, arg2, arg3, arg4);
}
EGLContext API_ENTRY(eglCreateContext)(EGLDisplay arg1, EGLConfig arg2, EGLContext arg3, const EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLContext, eglCreateContext, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglDestroyContext)(EGLDisplay arg1, EGLContext arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglDestroyContext, arg1, arg2);
}
EGLBoolean API_ENTRY(eglMakeCurrent)(EGLDisplay arg1, EGLSurface arg2, EGLSurface arg3, EGLContext arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglMakeCurrent, arg1, arg2, arg3, arg4);
}
EGLContext API_ENTRY(eglGetCurrentContext)(void) {
    CALL_EGL_API_RETURN_0(EGLContext, eglGetCurrentContext);
}
EGLSurface API_ENTRY(eglGetCurrentSurface)(EGLint arg1) {
    CALL_EGL_API_RETURN_1(EGLSurface, eglGetCurrentSurface, arg1);
}
EGLDisplay API_ENTRY(eglGetCurrentDisplay)(void) {
    CALL_EGL_API_RETURN_0(EGLDisplay, eglGetCurrentDisplay);
}
EGLBoolean API_ENTRY(eglQueryContext)( EGLDisplay arg1, EGLContext arg2, EGLint arg3, EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglQueryContext, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglWaitGL)(void) {
    CALL_EGL_API_RETURN_0(EGLBoolean, eglWaitGL);
}
EGLBoolean API_ENTRY(eglWaitNative)(EGLint arg1) {
    CALL_EGL_API_RETURN_1(EGLBoolean, eglWaitNative, arg1);
}
EGLBoolean API_ENTRY(eglSwapBuffers)(EGLDisplay arg1, EGLSurface arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglSwapBuffers, arg1, arg2);
}
EGLBoolean API_ENTRY(eglCopyBuffers)(EGLDisplay arg1, EGLSurface arg2, NativePixmapType arg3) {
    CALL_EGL_API_RETURN_3(EGLBoolean, eglCopyBuffers, arg1, arg2, arg3);
}
EGLint API_ENTRY(eglGetError)(void) {
    CALL_EGL_API_RETURN_0(EGLint, eglGetError);
}
const char* API_ENTRY(eglQueryString)(EGLDisplay arg1, EGLint arg2) {
    CALL_EGL_API_RETURN_2(const char*, eglQueryString, arg1, arg2);
}
__eglMustCastToProperFunctionPointerType API_ENTRY(eglGetProcAddress)(const char * arg1) {
    CALL_EGL_API_RETURN_1(__eglMustCastToProperFunctionPointerType, eglGetProcAddress, arg1);
}

/* EGL 1.1 */

EGLBoolean API_ENTRY(eglSurfaceAttrib)(EGLDisplay arg1, EGLSurface arg2, EGLint arg3, EGLint arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglSurfaceAttrib, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglBindTexImage)(EGLDisplay arg1, EGLSurface arg2, EGLint arg3) {
    CALL_EGL_API_RETURN_3(EGLBoolean, eglBindTexImage, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglReleaseTexImage)(EGLDisplay arg1, EGLSurface arg2, EGLint arg3) {
    CALL_EGL_API_RETURN_3(EGLBoolean, eglReleaseTexImage, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglSwapInterval)(EGLDisplay arg1, EGLint arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglSwapInterval, arg1, arg2);
}

/* EGL 1.2 */

EGLBoolean API_ENTRY(eglBindAPI)(EGLenum arg1) {
    CALL_EGL_API_RETURN_1(EGLBoolean, eglBindAPI, arg1);
}
EGLenum API_ENTRY(eglQueryAPI)(void) {
    CALL_EGL_API_RETURN_0(EGLenum, eglQueryAPI);
}
EGLBoolean API_ENTRY(eglWaitClient)(void) {
    CALL_EGL_API_RETURN_0(EGLBoolean, eglWaitClient);
}
EGLBoolean API_ENTRY(eglReleaseThread)(void) {
    CALL_EGL_API_RETURN_0(EGLBoolean, eglReleaseThread);
}
EGLSurface API_ENTRY(eglCreatePbufferFromClientBuffer)(EGLDisplay arg1, EGLenum arg2, EGLClientBuffer arg3, EGLConfig arg4, const EGLint * arg5) {
    CALL_EGL_API_RETURN_5(EGLSurface, eglCreatePbufferFromClientBuffer, arg1, arg2, arg3, arg4, arg5);
}

/* EGL 1.3 */

/* EGL 1.4 */

/* EGL_EGLEXT_VERSION 3 */

EGLBoolean API_ENTRY(eglLockSurfaceKHR)(  EGLDisplay arg1, EGLSurface arg2, const EGLint * arg3) {
    CALL_EGL_API_RETURN_3(EGLBoolean, eglLockSurfaceKHR, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglUnlockSurfaceKHR)(EGLDisplay arg1, EGLSurface arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglUnlockSurfaceKHR, arg1, arg2);
}
EGLImageKHR API_ENTRY(eglCreateImageKHR)(  EGLDisplay arg1, EGLContext arg2, EGLenum arg3, EGLClientBuffer arg4, const EGLint * arg5) {
    CALL_EGL_API_RETURN_5(EGLImageKHR, eglCreateImageKHR, arg1, arg2, arg3, arg4, arg5);
}
EGLBoolean API_ENTRY(eglDestroyImageKHR)( EGLDisplay arg1, EGLImageKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglDestroyImageKHR, arg1, arg2);
}

/* EGL_EGLEXT_VERSION 5 */

EGLSyncKHR API_ENTRY(eglCreateSyncKHR)(      EGLDisplay arg1, EGLenum arg2, const EGLint * arg3) {
    CALL_EGL_API_RETURN_3(EGLSyncKHR, eglCreateSyncKHR, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglDestroySyncKHR)(     EGLDisplay arg1, EGLSyncKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglDestroySyncKHR, arg1, arg2);
}
EGLint API_ENTRY(eglClientWaitSyncKHR)(  EGLDisplay arg1, EGLSyncKHR arg2, EGLint arg3, EGLTimeKHR arg4) {
    CALL_EGL_API_RETURN_4(EGLint, eglClientWaitSyncKHR, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglSignalSyncKHR)(      EGLDisplay arg1, EGLSyncKHR arg2, EGLenum arg3) {
    CALL_EGL_API_RETURN_3(EGLBoolean, eglSignalSyncKHR, arg1, arg2, arg3);
}
EGLBoolean API_ENTRY(eglGetSyncAttribKHR)(   EGLDisplay arg1, EGLSyncKHR arg2, EGLint arg3, EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglGetSyncAttribKHR, arg1, arg2, arg3, arg4);
}

/* EGL_EGLEXT_VERSION 15 */

EGLStreamKHR API_ENTRY(eglCreateStreamKHR)(    EGLDisplay arg1, const EGLint * arg2) {
    CALL_EGL_API_RETURN_2(EGLStreamKHR, eglCreateStreamKHR, arg1, arg2);
}
EGLBoolean API_ENTRY(eglDestroyStreamKHR)(   EGLDisplay arg1, EGLStreamKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglDestroyStreamKHR, arg1, arg2);
}
EGLBoolean API_ENTRY(eglStreamAttribKHR)(    EGLDisplay arg1, EGLStreamKHR arg2, EGLenum arg3, EGLint arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglStreamAttribKHR, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglQueryStreamKHR)(     EGLDisplay arg1, EGLStreamKHR arg2, EGLenum arg3, EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglQueryStreamKHR, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglQueryStreamu64KHR)(  EGLDisplay arg1, EGLStreamKHR arg2, EGLenum arg3, EGLuint64KHR * arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglQueryStreamu64KHR, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglStreamConsumerGLTextureExternalKHR)( EGLDisplay arg1, EGLStreamKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglStreamConsumerGLTextureExternalKHR, arg1, arg2);
}
EGLBoolean API_ENTRY(eglStreamConsumerAcquireKHR)(           EGLDisplay arg1, EGLStreamKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglStreamConsumerAcquireKHR, arg1, arg2);
}
EGLBoolean API_ENTRY(eglStreamConsumerReleaseKHR)(           EGLDisplay arg1, EGLStreamKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLBoolean, eglStreamConsumerReleaseKHR, arg1, arg2);
}
EGLSurface API_ENTRY(eglCreateStreamProducerSurfaceKHR)(     EGLDisplay arg1, EGLConfig arg2, EGLStreamKHR arg3, const EGLint * arg4) {
    CALL_EGL_API_RETURN_4(EGLSurface, eglCreateStreamProducerSurfaceKHR, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglQueryStreamTimeKHR)( EGLDisplay arg1, EGLStreamKHR arg2, EGLenum arg3, EGLTimeKHR* arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglQueryStreamTimeKHR, arg1, arg2, arg3, arg4);
}
EGLNativeFileDescriptorKHR API_ENTRY(eglGetStreamFileDescriptorKHR)(         EGLDisplay arg1, EGLStreamKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLNativeFileDescriptorKHR, eglGetStreamFileDescriptorKHR, arg1, arg2);
}
EGLStreamKHR API_ENTRY(eglCreateStreamFromFileDescriptorKHR)(  EGLDisplay arg1, EGLNativeFileDescriptorKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLStreamKHR, eglCreateStreamFromFileDescriptorKHR, arg1, arg2);
}
EGLint API_ENTRY(eglWaitSyncKHR)(        EGLDisplay arg1, EGLSyncKHR arg2, EGLint arg3) {
    CALL_EGL_API_RETURN_3(EGLint, eglWaitSyncKHR, arg1, arg2, arg3);
}

/* ANDROID extensions */

EGLBoolean API_ENTRY(eglSetSwapRectangleANDROID)(EGLDisplay arg1, EGLSurface arg2, EGLint arg3, EGLint arg4, EGLint arg5, EGLint arg6) {
    CALL_EGL_API_RETURN_6(EGLBoolean, eglSetSwapRectangleANDROID, arg1, arg2, arg3, arg4, arg5, arg6);
}
EGLClientBuffer API_ENTRY(eglGetRenderBufferANDROID)(EGLDisplay arg1, EGLSurface arg2) {
    CALL_EGL_API_RETURN_2(EGLClientBuffer, eglGetRenderBufferANDROID, arg1, arg2);
}
EGLint API_ENTRY(eglDupNativeFenceFDANDROID)(EGLDisplay arg1, EGLSyncKHR arg2) {
    CALL_EGL_API_RETURN_2(EGLint, eglDupNativeFenceFDANDROID, arg1, arg2);
}
EGLClientBuffer API_ENTRY(eglCreateNativeClientBufferANDROID)(const EGLint * arg1) {
    CALL_EGL_API_RETURN_1(EGLClientBuffer, eglCreateNativeClientBufferANDROID, arg1);
}

/* NVIDIA extensions */

EGLuint64NV API_ENTRY(eglGetSystemTimeFrequencyNV)(void) {
    CALL_EGL_API_RETURN_0(EGLuint64NV, eglGetSystemTimeFrequencyNV);
}
EGLuint64NV API_ENTRY(eglGetSystemTimeNV)(void) {
    CALL_EGL_API_RETURN_0(EGLuint64NV, eglGetSystemTimeNV);
}

/* IMG extensions */

EGLBoolean API_ENTRY(eglHibernateProcessIMG)(void) {
    CALL_EGL_API_RETURN_0(EGLBoolean, eglHibernateProcessIMG);
}
EGLBoolean API_ENTRY(eglAwakenProcessIMG)(void) {
    CALL_EGL_API_RETURN_0(EGLBoolean, eglAwakenProcessIMG);
}

/* Partial update extensions */

EGLBoolean API_ENTRY(eglSwapBuffersWithDamageKHR)(EGLDisplay arg1, EGLSurface arg2, EGLint * arg3, EGLint arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglSwapBuffersWithDamageKHR, arg1, arg2, arg3, arg4);
}
EGLBoolean API_ENTRY(eglSetDamageRegionKHR)(EGLDisplay arg1, EGLSurface arg2, EGLint * arg3, EGLint arg4) {
    CALL_EGL_API_RETURN_4(EGLBoolean, eglSetDamageRegionKHR, arg1, arg2, arg3, arg4);
}
